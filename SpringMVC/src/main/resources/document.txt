											LESSION 3
											
when file config-spring.xml load done init-method created first. destroy-method run when close connect.

		   <bean name="nhanVien" class="vn.com.spring.entity.NhanVien" init-method="" destroy-method="">
		   		<property name="name" value="CUONG"></property>
		   		<property name="id" value="1"></property>
		   		<property name="location" value="CUONG"></property>
		  </bean>
		  
factory-method and factory-bean: 
			factory-bean: chỉ ra nhà máy để tạo ra entity
			factory-method chỉ định method được gọi
if use single factory-method then use method static

bean always return 1 class

========================================================================================================

											LESSION 4
1.											
	Use constructor default is no argumment
	Use constructor have argumment
			   <bean name="nhanVien" class="vn.com.spring.entity.NhanVien" init-method="" destroy-method="">
			   		<constructor-arg value="18"></constructor-arg>
			   		<constructor-arg value="Nguyen Van Dat"></constructor-arg> 		
			  </bean>
	
	You want use constructor have argumment then first you need defind the constructor have argumment corresponding(tương ứng).
2.
	Create new 1 entity is GiamDoc extends from NhanVien
	Add GiamDoc is a field of NhanVien follow relationship is-a.
	property: ref="" use referent from object is field of class
	
		<bean name="nhanVien" class="vn.com.spring.entity.NhanVien" init-method="" destroy-method="">
		   		<constructor-arg value="18"></constructor-arg>
		   		<constructor-arg value="Nguyen Van Dat"></constructor-arg> 	
		   		<constructor-arg ref="giamDoc"></constructor-arg>	
		  </bean>
		  
		  <bean name="giamDoc" class="vn.com.spring.entity.GiamDoc">
		 	 <constructor-arg value="Giam Doc"></constructor-arg>
		  </bean>

3.		  
	if we are want defind type data we are need use type in bean:
		
		 <bean name="nhanVien" class="vn.com.spring.entity.NhanVien" init-method="" destroy-method="">
	   		<constructor-arg type="int" value="18"></constructor-arg>
	   		<constructor-arg value="Nguyen Van Dat"></constructor-arg> 	
	   		<constructor-arg ref="giamDoc"></constructor-arg>	
	  	</bean>
4. 
	If we are want to specify name for the field of object then we are use property name:
		<bean name="nhanVien" class="vn.com.spring.entity.NhanVien" init-method="" destroy-method="">
	   		<constructor-arg name="id" type="int" value="18"></constructor-arg>
	   		<constructor-arg value="Nguyen Van Dat"></constructor-arg> 	
	   		<constructor-arg ref="giamDoc"></constructor-arg>	
	  	</bean>

============================================================================================================================

											LESSION 5
1.
	Guide use property is filde list in object with data type is primary:
	
		b1. create field list in object;
			public class NhanVien {
				...
				private List<String> list;
			}
		b2: Assign field data in file bean:
				<property name="list">
			   		<list>
			   			<value>AN</value>
			   			<value>Cuong</value>
			   			<value>AN</value>
			   			<value>AN</value>
			   		</list>		
		   		</property>

2.

	Guide use property is filde list in object with data type is Object:
	
		b1: Create field list object in entity:
			public class NhanVien {
				....
				private List<GiamDoc> giamDocs;
			}
		
		b2: create the bean object of list data in file bean xml
			 <bean name="giamDoc1" class="vn.com.spring.entity.GiamDoc">
			 	 <constructor-arg value="Giam Doc 1"></constructor-arg>
			  </bean>
			  
			  <bean name="giamDoc2" class="vn.com.spring.entity.GiamDoc">
			 	 <constructor-arg value="Giam Doc 2"></constructor-arg>
			  </bean>
		  
		b3: Assign field data in file bean:
			<bean name="nhanVien" class="vn.com.spring.entity.NhanVien" init-method="" destroy-method="">   		
			   		....
			   		<property name="giamDocs">
				   		<list>
				   			<ref bean="giamDoc1"/>
				   			<ref bean="giamDoc2"/>
				   		</list>		
			   		</property>
			  </bean>

==========================================================================================================

											LESSION 6
1.
	Guide use assign field data is Map
	
		b1:Create new field data is map in entity:
		public class NhanVien {
			.....
			private Map<String, Object> map;
		}
		
		b2: Assign data for field map in xml
		   		<property name="map">
		   			<map>
		   				<entry key="Map 1" value="Map 1 nhe"></entry>
		   				<entry key="Map 2" value-ref="giamDoc"></entry>
		   			</map>
		   		</property>

=========================================================================================================

											LESSION 7
											
Autowrite is mechanism(cơ chế) auto inject field data have property same same. If have 1 field data coincidence(trùng hợp) 
then it auto map and inject data.
	b1: Create field data have form after
	public class NhanVien {
		....
		private GiamDoc giamDoc;
	}
	
	b2: Use autowrite as after:
		<bean name="nhanVien" class="vn.com.spring.entity.NhanVien" autowire="byType"></bean>
			<bean name="giamDoc" class="vn.com.spring.entity.GiamDoc">
				<constructor-arg value="Giam Doc"></constructor-arg>
		</bean>

The same with byType

==========================================================================================================

											LESSION 8

1. Why not need content website?
	Using jsp for display item html.
2. Vòng đời của file jsp?
	Client request tới file jsp => Jsp translator sẽ biên dịch file jsp thành file java.servlet rồi biên dịch thành file .java
	Lúc này file jsp mới chính thức chạy. Hàm get hàm post thông qua jspService
3. Example 
	3.1 Config servlet in file web.xml:
		- Config DispatcherServlet:
			<servlet-name>spring-mvc</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			
		- Config servlet-mapping:
			<servlet-mapping>
				<servlet-name>spring-mvc</servlet-name>
				<url-pattern>/</url-pattern>
			</servlet-mapping>

		- Code file HomeController:
				@Controller
				public class HomeController {				
					@RequestMapping("/")
					public String index() {				
						return "index.jsp";
					}
				}
		- File index.jsp in folder webapp
		
===============================================================================================================

											LESSION 9
																				
1. Divide folder container views display jsp
	b1. 
		- Create folder views in WE-INF
		- Folder views container all file jsp display		
	b2. 
		Config loading file:
			- Change file spring-mvn-servlet.xml by add new bean
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
				</bean>	
			- Change data type return of file HomeController	:
				@Controller
				public class HomeController {		
					@RequestMapping("/")
					public String index() {		
						return "index";
					}
				}

																		
												




